<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="styles.css">
  <title>Technical Documentation Page</title>
</head>
<body>
  <nav id="navbar">
    <header>JS Documentation</header>
    <ul>
      <li><a href="#Introduction" class="nav-link">Introduction</a></li>
      <li><a href="#What_you_should_already_know" class="nav-link">What You Should Already Know</a></li>
      <li><a href="#JavaScript_and_Java" class="nav-link">JavaScript and Java</a></li>
      <li><a href="#Hello_world" class="nav-link">Hello World</a></li>
      <li><a href="#Declaring_of_variables" class="nav-link">Declaring of Variables</a></li>
      <li><a href="#Variable_scope" class="nav-link">Variable Scope</a></li>
      <li><a href="#Reference" class="nav-link">Reference</a></li>
    </ul>
  </nav>
  <main id="main-doc">
    <section class="main-section" id="Introduction">
      <header class="main-header">Introduction</header>
      <p>Introduction is a cross-platform, object-oriented scripting language. It is a small and lightweight language.
        Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its
        environment to provide programmatic control over them.
        JavaScript contains a standard library of objects, such as Array, Date, and Math, and a core set of language
        elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of
        purposes by supplementing it with additional objects; for example:</p>
      <p>JavaScript can be used for:</p>
      <ul>
        <li>Client-side scripting</li>
        <li>Server-side scripting</li>
      </ul>
      <code>
        // Example code for Introduction
        const message = "Hello, World!";
        console.log(message);
      </code>
      <p>JavaScript is a versatile language that can be used for a wide range of applications. It's commonly used in web development to enhance the interactivity of websites.</p>
    </section>
    <section class="main-section" id="What_you_should_already_know">
      <header class="main-header">What You Should Already Know</header>
      <p>This guide assumes you have the following basic background:</p>
      <p>If you are new to web development or programming, don't worry! JavaScript is a great language to start with, and you can learn as you go.</p>
      <ul>
        <li>A general understanding of the Internet and the World Wide Web (WWW).</li>
        <li>Good working knowledge of HyperText Markup Language (HTML).</li>
        <li>Some programming experience. If you are new to programming, try one of the tutorials linked on the main page
          about JavaScript.</li>
      </ul>
      <code>
        // Example code for What You Should Already Know
        // No specific code examples for this section
      </code>
    </section>
    <section class="main-section" id="JavaScript_and_Java">
      <header class="main-header">JavaScript and Java</header>
      <p>JavaScript and Java are similar in some ways but fundamentally different in others. The JavaScript language
        resembles Java but does not have Java's static typing and strong type checking. JavaScript follows most Java
        expression syntax, naming conventions, and basic control-flow constructs, which was the reason why it was renamed
        from LiveScript to JavaScript.</p>
      <p>In contrast to Java's compile-time system of classes built by declarations, JavaScript supports a runtime system
        based on a small number of data types representing numeric, Boolean, and string values. JavaScript has a
        prototype-based object model instead of the more common class-based object model. The prototype-based model
        provides dynamic inheritance; that is, what is inherited can vary for individual objects. JavaScript also supports
        functions without any special declarative requirements. Functions can be properties of objects, executing as
        loosely typed methods.</p>
      <code>
        // Example code for JavaScript and Java
        // JavaScript code snippet
        const greeting = "Hello, World!";
        console.log(greeting);
      </code>
      <p>Understanding the differences between JavaScript and Java is essential, as it will help you avoid confusion and use each language effectively for its intended purpose.</p>
    </section>
    <section class="main-section" id="Hello_world">
      <header class="main-header">Hello World</header>
      <p>To get started with writing JavaScript, open the Scratchpad and write your first "Hello world" JavaScript code:</p>
      <p>The "Hello, World!" program is a simple way to get acquainted with a new programming language. It's a tradition for beginners to write this program to test the basic functionality of the language.</p>
      <code>
        // Example code for Hello World
        function greetMe(yourName) {
          alert("Hello " + yourName);
        }
        greetMe("World");
      </code>
      <p>Once you run this code, a pop-up alert will display the message "Hello, World!" This demonstrates how you can use JavaScript to interact with users.</p>
    </section>
    <section class="main-section" id="Declaring_of_variables">
      <header class="main-header">Declaring of Variables</header>
      <p>You can declare a variable in three ways:</p>
      <ul>
        <li>With the keyword var. For example,
          <code>
            var x = 42;
          </code>
          This syntax can be used to declare both local and global variables.
        </li>
        <li>By simply assigning it a value. For example,
          <code>
            x = 42;
          </code>
          This always declares a global variable. It generates a strict JavaScript warning. You shouldn't use this variant.
        </li>
        <li>With the keyword let. For example,
          <code>
            let y = 13;
          </code>
          This syntax can be used to declare a block-scope local variable. See Variable scope below.
        </li>
      </ul>
      <code>
        // Example code for Declaring of Variables
        const myVar = 42;
        console.log(myVar);
      </code>
      <p>Understanding variable declaration is fundamental to working with JavaScript. Different variable declarations have different implications for scope and behavior.</p>
    </section>
    <section class="main-section" id="Variable_scope">
      <header class="main-header">Variable Scope</header>
      <p>When you declare a variable outside of any function, it is called a global variable because it is available to
        any other code in the current document. When you declare a variable within a function, it is called a local
        variable because it is available only within that function.</p>
      <p>JavaScript before ECMAScript 2015 does not have block statement scope; rather, a variable declared within a block
        is local to the function (or global scope) that the block resides within. For example, the following code will log
        5 because the scope of x is the function (or global context) within which x is declared, not the block, which in
        this case is an if statement.</p>
      <code>
        // Example code for Variable Scope
        if (true) {
          var x = 5;
        }
        console.log(x); // 5
      </code>
      <p>This behavior changes when using the let declaration introduced in ECMAScript 2015.</p>
      <code>
        // Example code for Variable Scope with let
        if (true) {
          let y = 5;
        }
        console.log(y); // ReferenceError: y is not defined
      </code>
      <p>Understanding variable scope is crucial for avoiding unexpected variable behavior in your JavaScript code.</p>
    </section>
    <section class="main-section" id="Reference">
      <header class="main-header">Reference</header>
      <ul>
        <li>All the documentation on this page is taken from <a
            href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide">MDN</a></li>
      </ul>
      <code>
        // Example code for Reference
        // No specific code examples for this section
      </code>
      <p>Refer to external documentation, such as MDN (Mozilla Developer Network), for comprehensive information and examples related to JavaScript.</p>
    </section>
  </main>
</body>
</html>
